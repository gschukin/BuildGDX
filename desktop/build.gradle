import org.ajoberstar.grgit.Grgit

sourceCompatibility = 1.6

sourceSets {
    main {
        java {
            srcDirs = ['src/']
        }
        resources {
            srcDirs = ['res/']
        }
    }
}

project.ext.mainClassName = "ru.m210projects.Witchaven.desktop.DesktopLauncher"
project.ext.assetsDir = file("../android/assets") // TODO: Is this needed?

/**
 * Fetches current git HEAD and stores it as project.gitHead.
 */
task extractGitHead {
    try {
        def grgit = Grgit.open(dir: project.rootProject.projectDir)
        project.ext.gitHead = grgit.head().id.take(7)
    } catch (all) {
        // no-op, we will use project.version as project.gitHead
        project.ext.gitHead = null;
    }
}

task run(type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir.exists() ? project.assetsDir : sourceSets.main.output.classesDir
    ignoreExitValue = true
}

/**
 * Creates a fat JAR with all dependencies and resources included.
 * Current git HEAD will be configured as version if available.
 */
task dist(dependsOn: [classes, extractGitHead], type: Jar) {
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from {configurations.compile.collect {zipTree(it)}}
    from files(project.assetsDir)
    version = project.gitHead ?: project.version
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
    baseName = project.appName
}

eclipse {
    project {
        name = appName + "-desktop"
        linkedResource name: 'assets', type: '2', location: 'PARENT-1-PROJECT_LOC/android/assets'
    }
}

task afterEclipseImport(description: "Post processing after project generation", group: "IDE") {
    doLast {
        def classpath = new XmlParser().parse(file(".classpath"))
        new Node(classpath, "classpathentry", [ kind: 'src', path: 'assets' ]);
        def writer = new FileWriter(file(".classpath"))
        def printer = new XmlNodePrinter(new PrintWriter(writer))
        printer.setPreserveWhitespace(true)
        printer.print(classpath)
    }
}

// vim: set et: